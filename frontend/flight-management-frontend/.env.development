// .env.development dosyasƒ± olu≈ütur
// frontend/flight-management-frontend/.env.development

VITE_APP_TITLE=Flight Management System - Development
VITE_APP_VERSION=1.0.0
VITE_APP_ENV=development

# API Base URLs - Backend'ler hazƒ±r!
VITE_API_BASE_URL=http://localhost:8081
VITE_REFERENCE_MANAGER_URL=http://localhost:8081
VITE_FLIGHT_SERVICE_URL=http://localhost:8082
VITE_ARCHIVE_SERVICE_URL=http://localhost:8083

# WebSocket URLs
VITE_WS_BASE_URL=ws://localhost:8082
VITE_WS_FLIGHTS_URL=ws://localhost:8082/ws/flights

# Feature Flags
VITE_ENABLE_MOCK_DATA=false
VITE_ENABLE_DEBUG_MODE=true
VITE_ENABLE_WEBSOCKETS=true
VITE_ENABLE_CACHE=true

# Authentication
VITE_AUTH_TOKEN_KEY=auth_token
VITE_AUTH_REFRESH_KEY=refresh_token

# Upload Settings
VITE_MAX_FILE_SIZE=10485760
VITE_ALLOWED_FILE_TYPES=.csv,.xlsx,.xls

# Pagination
VITE_DEFAULT_PAGE_SIZE=20
VITE_MAX_PAGE_SIZE=1000

---

// main.js g√ºncelleme
// frontend/flight-management-frontend/src/main.js

import { createApp } from 'vue'
import { createPinia } from 'pinia'
import ElementPlus from 'element-plus'
import 'element-plus/dist/index.css'
import 'element-plus/theme-chalk/dark/css-vars.css'
import * as ElementPlusIconsVue from '@element-plus/icons-vue'
import tr from 'element-plus/es/locale/lang/tr'

import App from './App.vue'
import router from './router'

const app = createApp(App)

// Register all Element Plus icons
for (const [key, component] of Object.entries(ElementPlusIconsVue)) {
  app.component(key, component)
}

app.use(createPinia())
app.use(router)
app.use(ElementPlus, {
  locale: tr, // T√ºrk√ße dil desteƒüi
})

app.mount('#app')

---

// router/index.js g√ºncelleme  
// frontend/flight-management-frontend/src/router/index.js

import { createRouter, createWebHistory } from 'vue-router'

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: [
    {
      path: '/',
      redirect: '/dashboard'
    },
    {
      path: '/dashboard',
      name: 'Dashboard',
      component: () => import('@/pages/dashboard/DashboardPage.vue'),
      meta: { 
        title: 'Dashboard',
        requiresAuth: true 
      }
    },
    {
      path: '/login',
      name: 'Login',
      component: () => import('@/pages/auth/LoginPage.vue'),
      meta: { 
        title: 'Giri≈ü',
        requiresAuth: false 
      }
    },
    {
      path: '/flights',
      name: 'Flights',
      component: () => import('@/pages/flights/FlightListPage.vue'),
      meta: { 
        title: 'U√ßu≈ülar',
        requiresAuth: true 
      }
    },
    {
      path: '/flights/create',
      name: 'FlightCreate',
      component: () => import('@/pages/flights/FlightCreatePage.vue'),
      meta: { 
        title: 'Yeni U√ßu≈ü',
        requiresAuth: true 
      }
    },
    {
      path: '/flights/:id',
      name: 'FlightDetail',
      component: () => import('@/pages/flights/FlightDetailPage.vue'),
      meta: { 
        title: 'U√ßu≈ü Detayƒ±',
        requiresAuth: true 
      }
    },
    {
      path: '/reference',
      name: 'Reference',
      redirect: '/reference/airlines'
    },
    {
      path: '/reference/airlines',
      name: 'Airlines',
      component: () => import('@/pages/reference/AirlineListPage.vue'),
      meta: { 
        title: 'Havayollarƒ±',
        requiresAuth: true 
      }
    },
    {
      path: '/reference/airports',
      name: 'Airports',
      component: () => import('@/pages/reference/AirportListPage.vue'),
      meta: { 
        title: 'Havaalanlarƒ±',
        requiresAuth: true 
      }
    },
    {
      path: '/reference/aircrafts',
      name: 'Aircrafts',
      component: () => import('@/pages/reference/AircraftListPage.vue'),
      meta: { 
        title: 'U√ßaklar',
        requiresAuth: true 
      }
    },
    {
      path: '/:pathMatch(.*)*',
      name: 'NotFound',
      component: () => import('@/pages/error/NotFoundPage.vue'),
      meta: { 
        title: 'Sayfa Bulunamadƒ±' 
      }
    }
  ]
})

// Navigation guard for authentication
router.beforeEach((to, from, next) => {
  const token = localStorage.getItem('auth_token')
  const requiresAuth = to.meta.requiresAuth

  if (requiresAuth && !token) {
    next('/login')
  } else if (to.path === '/login' && token) {
    next('/dashboard')
  } else {
    next()
  }
})

// Set page title
router.afterEach((to) => {
  document.title = to.meta.title 
    ? `${to.meta.title} - Flight Management System`
    : 'Flight Management System'
})

export default router

---

// package.json scripts g√ºncelleme

{
  "scripts": {
    "dev": "vite --host 0.0.0.0 --port 3000",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext .vue,.js,.jsx,.cjs,.mjs --fix --ignore-path .gitignore",
    "format": "prettier --write src/",
    "backend:check": "curl -f http://localhost:8081/actuator/health && curl -f http://localhost:8082/actuator/health && curl -f http://localhost:8083/actuator/health"
  }
}

---

// Test i√ßin basit login sayfasƒ±
// frontend/flight-management-frontend/src/pages/auth/LoginPage.vue

<template>
  <div class="login-page">
    <div class="login-container">
      <div class="login-form">
        <h2>Flight Management System</h2>
        <el-form @submit.prevent="handleLogin" :loading="loading">
          <el-form-item>
            <el-input
              v-model="credentials.username"
              placeholder="Kullanƒ±cƒ± Adƒ±"
              :prefix-icon="User"
              size="large"
            />
          </el-form-item>
          <el-form-item>
            <el-input
              v-model="credentials.password"
              type="password"
              placeholder="≈ûifre"
              :prefix-icon="Lock"
              size="large"
            />
          </el-form-item>
          <el-form-item>
            <el-button 
              type="primary" 
              @click="handleLogin"
              :loading="loading"
              size="large"
              style="width: 100%"
            >
              Giri≈ü Yap
            </el-button>
          </el-form-item>
        </el-form>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { useRouter } from 'vue-router'
import { ElMessage } from 'element-plus'
import { User, Lock } from '@element-plus/icons-vue'
import apiService from '@/services/api'

const router = useRouter()
const loading = ref(false)

const credentials = ref({
  username: 'admin',
  password: 'admin123'
})

const handleLogin = async () => {
  loading.value = true
  try {
    await apiService.login(credentials.value)
    ElMessage.success('Giri≈ü ba≈üarƒ±lƒ±!')
    router.push('/dashboard')
  } catch (error) {
    ElMessage.error('Giri≈ü hatasƒ±: ' + (error.response?.data?.message || 'Bilinmeyen hata'))
  } finally {
    loading.value = false
  }
}
</script>

<style scoped>
.login-page {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.login-container {
  width: 400px;
  padding: 40px;
  background: white;
  border-radius: 10px;
  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
}

.login-form h2 {
  text-align: center;
  margin-bottom: 30px;
  color: #303133;
}
</style>

---

// Backend URL kontrol√º i√ßin basit utility
// frontend/flight-management-frontend/src/utils/backendCheck.js

export const checkBackendServices = async () => {
  const services = [
    { name: 'Reference Manager', url: 'http://localhost:8081/actuator/health' },
    { name: 'Flight Service', url: 'http://localhost:8082/actuator/health' },
    { name: 'Archive Service', url: 'http://localhost:8083/actuator/health' }
  ]

  const results = []

  for (const service of services) {
    try {
      const response = await fetch(service.url)
      results.push({
        ...service,
        status: response.ok ? 'UP' : 'DOWN',
        responseTime: Date.now()
      })
    } catch (error) {
      results.push({
        ...service,
        status: 'DOWN',
        error: error.message
      })
    }
  }

  return results
}

// Console'da backend durumunu kontrol et
export const logBackendStatus = async () => {
  console.log('üîç Backend servisler kontrol ediliyor...')
  const results = await checkBackendServices()
  
  results.forEach(service => {
    const icon = service.status === 'UP' ? '‚úÖ' : '‚ùå'
    console.log(`${icon} ${service.name} (${service.url}): ${service.status}`)
    if (service.error) {
      console.log(`   Error: ${service.error}`)
    }
  })
}